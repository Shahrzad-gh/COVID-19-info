{"version":3,"sources":["Components/SearchForm.js","Actions/searchActions.js","Actions/types.js","Reducers/searchReducer.js","Reducers/index.js","Store/store.js","Components/Country.js","Components/CountryContainer.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","onChange","e","props","searchCountry","target","value","onSubmit","preventDefault","fetchCountry","country","className","this","id","type","placeholder","aria-label","Component","connect","state","dispatch","payload","axios","then","response","data","catch","error","console","log","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","Country","lastUpdate","confirmed","deaths","recovered","CountryContainer","content","lenght","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4ab42af7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {searchCountry, fetchCountry} from '../Actions/searchActions'\r\nimport {connect} from 'react-redux';\r\n\r\nexport class SearchForm extends Component {\r\n    onChange = e =>{\r\n        this.props.searchCountry(e.target.value)\r\n    }\r\n    onSubmit = e =>{\r\n        e.preventDefault();\r\n        this.props.fetchCountry(this.props.country);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n            <div className=\"m-5\">\r\n                <div className=\"col-md-10 offset-md-1 mt-5 border border-secondary rounded-lg p-3 bg-light\">\r\n                    <div className=\"text-center font-weight-bold pb-3\">Search for a Country ...</div>\r\n                    <form className=\"input-group mb-3\" onSubmit={this.onSubmit}>\r\n                        <input id=\"search-text\" type=\"text\" className=\"form-control\" placeholder=\"Search ......\" aria-label=\"Recipient's username\"\r\n                        onChange= {this.onChange}/>\r\n                        <div className=\"input-group-append\">\r\n                            <button id=\"search-btn\" className=\"input-group-text\" type=\"submit\"><i className=\"fa fa-search\"></i></button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    country: state.country.country\r\n})\r\nexport default connect(mapStateToProps,{searchCountry, fetchCountry})(SearchForm)\r\n","import {SEARCH_COUNTRY, FETCH_COUNTRY} from './types';\r\nimport axios from 'axios';\r\n\r\nexport const searchCountry = country => dispatch =>{\r\n    dispatch({\r\n        type: SEARCH_COUNTRY,\r\n        payload: country\r\n    })\r\n}\r\n\r\nexport const fetchCountry = country => dispatch => {\r\n    axios({\r\n        \"method\":\"GET\",\r\n        \"url\":\"https://covid-19-data.p.rapidapi.com/country\",\r\n        \"headers\":{\r\n        \"content-type\":\"application/octet-stream\",\r\n        \"x-rapidapi-host\":\"covid-19-data.p.rapidapi.com\",\r\n        \"x-rapidapi-key\":\"65c1dd6d07mshe43d8e3974a5dbbp1f5482jsnccfd9db82107\",\r\n        \"useQueryString\":true\r\n        },\"params\":{\r\n        \"format\":\"json\",\r\n        \"name\":`${country}`\r\n        }\r\n    })\r\n    .then(response => \r\n        dispatch({\r\n        type: FETCH_COUNTRY,\r\n        payload: response.data\r\n    })\r\n    ) \r\n    .catch((error)=>{\r\n        console.log(error)\r\n      })\r\n    }\r\n","export const SEARCH_COUNTRY = 'SEARCH_COUNTRY';\r\nexport const FETCH_COUNTRY = 'FETCH_COUNTRY';","import {SEARCH_COUNTRY, FETCH_COUNTRY} from '../Actions/types';\r\n\r\nconst initialState = {\r\n    country : \"\",\r\n    data : []\r\n}\r\n\r\nexport default function(state= initialState, action){\r\n    switch(action.type){\r\n        case SEARCH_COUNTRY:\r\n            return{\r\n                ...state,\r\n                country: action.payload\r\n            }\r\n        case FETCH_COUNTRY:\r\n            return{\r\n                ...state,\r\n                data: action.payload\r\n            }\r\n        default :\r\n            return state    \r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport searchReducer from './searchReducer'\r\n\r\nexport default combineReducers({\r\n    country: searchReducer\r\n})\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension/developmentOnly';\r\nimport rootReducer from '../Reducers'\r\n\r\nconst middleware = [thunk];\r\nconst initialState = {}\r\n\r\nexport const store = createStore(rootReducer, initialState, composeWithDevTools(\r\n    applyMiddleware(...middleware)\r\n))\r\n\r\nexport default store","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nexport class Country extends Component {\r\n\r\n    render() {\r\n        const {data} = this.props;\r\n        return (\r\n            <div className=\"container\">\r\n            <h4 className=\"text-center mb-5\">COVID-19 Info</h4>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 text-center\">\r\n                    <div className=\"card card-body border-warning p-2\">\r\n                        <h4><strong>{data[0].country}</strong></h4>\r\n                        <p>last Update:</p>\r\n                        {data[0].lastUpdate}\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                            <ul className=\"list-group\">\r\n                                <li className=\"list-group-item p-1\">\r\n                                    <h5 className=\"card-item\">Confirmed: {data[0].confirmed}</h5>\r\n                                </li>\r\n                                <li className=\"list-group-item p-1\">\r\n                                    <h5>Death: {data[0].deaths}</h5>\r\n                                </li>\r\n                                <li className=\"list-group-item p-1\">\r\n                                    <h5>Recovered: {data[0].recovered}</h5>\r\n                                </li>    \r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n    country: state.country.country,\r\n    data: state.country.data\r\n})\r\n\r\nexport default connect(mapStateToProps)(Country)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport Country from './Country';\r\n\r\nexport class CountryContainer extends Component {\r\n    render() {\r\n        const {data} = this.props;\r\n        let content ='';\r\n        content = data.lenght !== 0 \r\n        ? data.map((country,index) => <Country key={index} country={country} />)\r\n        : null;\r\n        return (\r\n            <div>\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    data : state.country.data\r\n})\r\n\r\nexport default connect(mapStateToProps)(CountryContainer);","import React from 'react';\nimport './App.css';\nimport  SearchForm  from './Components/SearchForm';\nimport {store} from './Store/store';\nimport {Provider} from 'react-redux'\nimport  CountryContainer  from './Components/CountryContainer';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <SearchForm />\n      <CountryContainer />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}